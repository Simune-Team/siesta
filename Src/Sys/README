Makefile fragments to compile SIESTA on different architectures and compilers.

* Look for a .make file in this directory that might be appropriate for
  your particular configuration. If there is none, write your own using
  the existing files as guides. Note that some of these files are
  retained for historical purposes, and they might be out of date. Some
  files refer to computers of special interest to developers, and the
  locations of installed libraries might differ from your own.

* Copy or link the file to the build directory, renaming it as "arch.make".

The macro SYS in the .make files refers to files holding
machine-dependent routines, which are kept in the Src directory,
according to the architecture and compiler/library capabilities.

NetCDF hooks:

If you have netcdf installed, you can set the macros NETCDF_XXX
(as in some of the example files) to use it.

THINGS TO WATCH OUT FOR:

* If you have trouble compiling .F90 files, it might be that your compiler
does not recognize the .F90 suffix as a "in need of preprocessing, free
form, source file". Then you need to do the preprocessing *before* invoking
the compiler. This happens, to our knowledge, on Suns and Alphas. A quick
way to fix it is to redefine the .F90 rule in the arch.make file, along the
lines:

#
.F90.o:
        $(CPP) $(DEFS) $< > $*.f90
        $(FC) -c $(FFLAGS) $*.f90
        @rm -f $*.f90
#

WARNING: Make sure that the "leading spaces" above are actually a single
tab character.

* The Portland Group's pgf9X compiler (several versions) 
produces bad code when compiling atom.f and electrostatic.f 
with optimization. A special set of rules has been inserted in 
some files so that no optimization is used. You might
need to consider it for your own arch.make.
