
  use class_Sparsity
  use class_OrbitalDistribution

  implicit none

  character(len=*), parameter :: mod_name="class_"//STR_TYPE_NAME//".F90"

  public :: val, spar, dist
  public :: nrows, nrows_g, nnzs, n_col, list_ptr, list_col
  public :: print_type
  public :: NEW_TYPE

  integer, parameter :: sp = selected_real_kind(5,10)
  integer, parameter :: dp = selected_real_kind(10,100)

  type TYPE_NAME_
    integer            :: refCount = 0
    character(len=36)  :: id = "null_id"
    !----------------------
    character(len=256)   :: name = "null "//STR_TYPE_NAME
    type(Sparsity)            :: sp
    type(VAR_TYPE)            :: a
    type(OrbitalDistribution) :: dist
  end type TYPE_NAME_

  type TYPE_NAME
    type(TYPE_NAME_), pointer :: data => null()
  end type TYPE_NAME

  interface NEW_TYPE
    module procedure newSpDataFromData
    module procedure newSpDataFromDims
  end interface

  interface val
    module procedure valSpData
  end interface

  interface spar
    module procedure sparSpData
  end interface

  interface dist
    module procedure distSpData
  end interface

  interface nrows
     module procedure nrowsSpData
  end interface

  interface nrows_g
     module procedure nrows_gSpData
  end interface

  interface nnzs
     module procedure nnzsSpData
  end interface

  interface n_col
     module procedure n_colSpData
  end interface

  interface list_ptr
     module procedure list_ptrSpData
  end interface

  interface list_col
     module procedure list_colSpData
  end interface
  
  interface print_type
     module procedure printSpData
  end interface print_type

!==========================
#include "basic_type.inc"
!==========================
  
  subroutine delete_Data(smdata)
    type(TYPE_NAME_) :: smdata
    
    call delete(smdata%sp)
    call delete(smdata%a)
    call delete(smdata%dist)
  end subroutine delete_Data

  subroutine newSpDataFromData(sp,a,dist,this,name)
     !........................................
     ! Constructor
     !........................................
    type(TYPE_NAME), intent(inout) :: this
    type(Sparsity),  intent(in)    :: sp
    type(VAR_TYPE),   intent(in)   :: a
    type(OrbitalDistribution),  intent(in) :: dist
    character(len=*), intent(in), optional :: name

    integer :: error
    
    call init(this)
    
    this%data%sp = sp
    this%data%a = a
    this%data%dist = dist
    
    if (present(name)) then
       this%data%name = trim(name)
    else
       this%data%name = "(SpData from sp, dist, and a)"
    endif
    call tag_new_object(this)
    
  end subroutine newSpDataFromData

  subroutine newSpDataFromDims(sp,dim,dist,this,name)
    !........................................
    ! Constructor
    !........................................
    type(TYPE_NAME), intent(inout)        :: this
    type(Sparsity), intent(in)            :: sp
    type(OrbitalDistribution), intent(in) :: dist
    integer,  intent(in)                  :: dim
    character(len=*), intent(in), optional :: name
    
    integer :: error

    call init(this)
    this%data%sp = sp
    this%data%dist = dist
    call VAR_NEW_TYPE(this%data%a, &
         nnzs(sp),dim,"(new from "//STR_TYPE_NAME//")")
    
    if (present(name)) then
       this%data%name = trim(name)
    else
       this%data%name = "("//STR_TYPE_NAME//" from sp, dim, and dist)"
    endif
    call tag_new_object(this)
    
  end subroutine newSpDataFromDims
  
  !--------------------------------------------------
  function valSpData(this) result(p)
    type(TYPE_NAME), intent(in)  :: this
    VAR_TYPE_TYPE(PREC), pointer :: p(:,:) ! => null()
    
    p => val(this%data%a)
  end function valSpData

  function sparSpData(this) result(p)
    type(TYPE_NAME), intent(in) :: this
    type(Sparsity), pointer     :: p ! => null()
    
    p => this%data%sp
  end function sparSpData
  
  function distSpData(this) result(p)
    type(TYPE_NAME), intent(in)        :: this
    type(OrbitalDistribution), pointer :: p ! => null()
    
    p => this%data%dist
  end function distSpData

!--------------------------------------------------
  function nrowsSpData(this) result (n)
    type(TYPE_NAME), intent(in) :: this
    integer                     :: n

    n = nrows(this%data%sp)
  end function nrowsSpData

  function nrows_gSpData(this) result (n)
    type(TYPE_NAME), intent(in) :: this
    integer                     :: n

    n = nrows_g(this%data%sp)
  end function nrows_gSpData
  
  function nnzsSpData(this) result (n)
    type(TYPE_NAME), intent(in) :: this
    integer                     :: n

    n = nnzs(this%data%sp)
  end function nnzsSpData

  function n_colSpData(this) result (p)
    type(TYPE_NAME), intent(in) :: this
    integer, pointer            :: p(:) ! => null()

    p => n_col(this%data%sp)
  end function n_colSpData

 function list_ptrSpData(this) result (p)
   type(TYPE_NAME), intent(in) :: this
   integer, pointer            :: p(:) ! => null()
   p => list_ptr(this%data%sp)
 end function list_ptrSpData

 function list_colSpData(this) result (p)
   type(TYPE_NAME), intent(in) :: this
   integer, pointer            :: p(:)
   p => list_col(this%data%sp)
 end function list_colSpData
 
 subroutine printSpData(this)
   type(TYPE_NAME), intent(in)  :: this

   if (.not. associated(this%data)) then
      print "(a)", STR_TYPE_NAME//" Not Associated"
      RETURN
   endif
   
   print "(a)", "<"//STR_TYPE_NAME//":"//trim(this%data%name)
   call print_type(this%data%sp)
   call print_type(this%data%a)
   print "(a,i0,a)", "refcount: ",refcount(this),">"
   
 end subroutine printSpData

#undef STR_TYPE_NAME 
#undef TYPE_NAME 
#undef TYPE_NAME_
#undef NEW_TYPE
#undef VAR_TYPE
#undef VAR_NEW_TYPE
#undef VAR_TYPE_TYPE
#undef PREC
