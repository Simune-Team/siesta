!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.2	//
SAMPLE	sample.F90	/^PROGRAM SAMPLE$/;"	p
arr2s	utils.F90	/^    FUNCTION arr2s(/;"	f	module:utils
array	parse.F90	/^    type(ptoken), pointer :: array(/;"	k	type:parsed_line
axis	sample.F90	/^  character(20)              :: fname, axis,/;"	v	program:SAMPLE
bfdf	sample.F90	/^  type(block_fdf)            :: bfdf$/;"	v	program:SAMPLE
block_fdf	fdf.F90	/^  type block_fdf$/;"	t	module:fdf
blocks	parse.F90	/^    FUNCTION blocks(/;"	f	module:parse
chrcap	utils.F90	/^    SUBROUTINE chrcap(/;"	s	module:utils
chrlen	utils.F90	/^    SUBROUTINE chrlen(/;"	s	module:utils
create	parse.F90	/^    SUBROUTINE create(/;"	s	module:parse
cutoff	sample.F90	/^  real(dp)                   :: cutoff,/;"	v	program:SAMPLE
debug	sample.F90	/^  logical                    :: doit, debug$/;"	v	program:SAMPLE
destroy	parse.F90	/^    SUBROUTINE destroy(/;"	s	module:parse
die	utils.F90	/^    SUBROUTINE die(/;"	s	module:utils
digest	parse.F90	/^    FUNCTION digest(/;"	f	module:parse
doit	sample.F90	/^  logical                    :: doit,/;"	v	program:SAMPLE
dp	prec.F90	/^  integer, parameter :: dp /;"	v	module:prec
endblocks	parse.F90	/^    FUNCTION endblocks(/;"	f	module:parse
external_entry	sample.F90	/^  integer(sp)                :: i, ia, na, external_entry$/;"	v	program:SAMPLE
factor	sample.F90	/^  real(dp)                   :: cutoff, phonon_energy, factor$/;"	v	program:SAMPLE
fdf	fdf.F90	/^MODULE fdf$/;"	m
fdf_addtoken	fdf.F90	/^    SUBROUTINE fdf_addtoken(/;"	s	module:fdf
fdf_bbackspace	fdf.F90	/^    FUNCTION fdf_bbackspace(/;"	f	module:fdf
fdf_bline	fdf.F90	/^    FUNCTION fdf_bline(/;"	f	module:fdf
fdf_block	fdf.F90	/^    FUNCTION fdf_block(/;"	f	module:fdf
fdf_boolean	fdf.F90	/^    FUNCTION fdf_boolean(/;"	f	module:fdf
fdf_brewind	fdf.F90	/^    SUBROUTINE fdf_brewind(/;"	s	module:fdf
fdf_close	fdf.F90	/^    SUBROUTINE fdf_close(/;"	s	module:fdf
fdf_convfac	fdf.F90	/^    FUNCTION fdf_convfac(/;"	f	module:fdf
fdf_debug	fdf.F90	/^  logical, private                :: fdf_debug /;"	v	module:fdf
fdf_debug2	fdf.F90	/^                                     fdf_debug2 /;"	v	module:fdf
fdf_defined	fdf.F90	/^    logical FUNCTION fdf_defined(/;"	f	module:fdf
fdf_destroy	fdf.F90	/^    SUBROUTINE fdf_destroy(/;"	s	module:fdf
fdf_destroy_dl	fdf.F90	/^    RECURSIVE SUBROUTINE fdf_destroy_dl(/;"	s	module:fdf
fdf_double	fdf.F90	/^    FUNCTION fdf_double(/;"	f	module:fdf
fdf_dump	fdf.F90	/^    SUBROUTINE fdf_dump(/;"	s	module:fdf
fdf_err	fdf.F90	/^  integer(ip), private            :: fdf_out, fdf_err,/;"	v	module:fdf
fdf_file	fdf.F90	/^  type fdf_file$/;"	t	module:fdf
fdf_getline	fdf.F90	/^    FUNCTION fdf_getline(/;"	f	module:fdf
fdf_in	fdf.F90	/^  integer(ip), private            :: fdf_in(/;"	v	module:fdf
fdf_init	fdf.F90	/^    SUBROUTINE fdf_init(/;"	s	module:fdf
fdf_initdata	fdf.F90	/^    SUBROUTINE fdf_initdata(/;"	s	module:fdf
fdf_input	fdf.F90	/^    SUBROUTINE fdf_input(/;"	s	module:fdf
fdf_integer	fdf.F90	/^    FUNCTION fdf_integer(/;"	f	module:fdf
fdf_locate	fdf.F90	/^    FUNCTION fdf_locate(/;"	f	module:fdf
fdf_log	fdf.F90	/^  integer(ip), private            :: fdf_out, fdf_err, fdf_log$/;"	v	module:fdf
fdf_mpi_finalize	fdf.F90	/^    SUBROUTINE fdf_mpi_finalize(/;"	s	module:fdf
fdf_mpi_init	fdf.F90	/^    SUBROUTINE fdf_mpi_init(/;"	s	module:fdf
fdf_open	fdf.F90	/^    SUBROUTINE fdf_open(/;"	s	module:fdf
fdf_out	fdf.F90	/^  integer(ip), private            :: fdf_out,/;"	v	module:fdf
fdf_output	fdf.F90	/^    SUBROUTINE fdf_output(/;"	s	module:fdf
fdf_physical	fdf.F90	/^    FUNCTION fdf_physical(/;"	f	module:fdf
fdf_printfdf	fdf.F90	/^    SUBROUTINE fdf_printfdf(/;"	s	module:fdf
fdf_read	fdf.F90	/^    RECURSIVE SUBROUTINE fdf_read(/;"	s	module:fdf
fdf_readblocking	fdf.F90	/^    SUBROUTINE fdf_readblocking(/;"	s	module:fdf
fdf_readcluster	fdf.F90	/^    SUBROUTINE fdf_readcluster(/;"	s	module:fdf
fdf_readlabel	fdf.F90	/^    RECURSIVE FUNCTION fdf_readlabel(/;"	f	module:fdf
fdf_recvInput	fdf.F90	/^    SUBROUTINE fdf_recvInput(/;"	s	module:fdf
fdf_searchlabel	fdf.F90	/^    FUNCTION fdf_searchlabel(/;"	f	module:fdf
fdf_sendInput	fdf.F90	/^    SUBROUTINE fdf_sendInput(/;"	s	module:fdf
fdf_setdebug	fdf.F90	/^    SUBROUTINE fdf_setdebug(/;"	s	module:fdf
fdf_shutdown	fdf.F90	/^    SUBROUTINE fdf_shutdown(/;"	s	module:fdf
fdf_single	fdf.F90	/^    FUNCTION fdf_single(/;"	f	module:fdf
fdf_started	fdf.F90	/^                                     fdf_started /;"	v	module:fdf
fdf_string	fdf.F90	/^    FUNCTION fdf_string(/;"	f	module:fdf
file_in	fdf.F90	/^  type(fdf_file), pointer :: file_in$/;"	v	module:fdf
first	fdf.F90	/^    type(line_dlist), pointer :: first$/;"	k	type:fdf_file
fname	sample.F90	/^  character(20)              :: fname,/;"	v	program:SAMPLE
i	sample.F90	/^  in/;"	v	program:SAMPLE
i2s	utils.F90	/^    FUNCTION i2s(/;"	f	module:utils
ia	sample.F90	/^  integer(sp)                :: i, ia,/;"	v	program:SAMPLE
id	parse.F90	/^    character, pointer    :: id(/;"	k	type:parsed_line
integers	parse.F90	/^    FUNCTION integers(/;"	f	module:parse
io	io.F90	/^MODULE io$/;"	m
io_assign	io.F90	/^    SUBROUTINE io_assign(/;"	s	module:io
io_close	io.F90	/^    SUBROUTINE io_close(/;"	s	module:io
io_geterr	io.F90	/^    SUBROUTINE io_geterr(/;"	s	module:io
io_getout	io.F90	/^    SUBROUTINE io_getout(/;"	s	module:io
io_reserve	io.F90	/^    SUBROUTINE io_reserve(/;"	s	module:io
io_seterr	io.F90	/^    SUBROUTINE io_seterr(/;"	s	module:io
io_setout	io.F90	/^    SUBROUTINE io_setout(/;"	s	module:io
io_status	io.F90	/^    SUBROUTINE io_status(/;"	s	module:io
ip	prec.F90	/^  integer, parameter :: ip /;"	v	module:prec
is_integer	parse.F90	/^    FUNCTION is_integer(/;"	f	module:parse
is_value	parse.F90	/^    FUNCTION is_value(/;"	f	module:parse
isa	sample.F90	/^  integer(sp)                :: isa(/;"	v	program:SAMPLE
label	fdf.F90	/^    character(len=max_length) :: label$/;"	k	type:block_fdf
labeleq	utils.F90	/^    FUNCTION labeleq(/;"	f	module:utils
labels	parse.F90	/^    FUNCTION labels(/;"	f	module:parse
last	fdf.F90	/^    type(line_dlist), pointer :: last$/;"	k	type:fdf_file
leqi	utils.F90	/^    FUNCTION leqi(/;"	f	module:utils
leqi_strict	utils.F90	/^    FUNCTION leqi_strict(/;"	f	module:utils
line_dlist	fdf.F90	/^  type line_dlist$/;"	t	module:fdf
lun_is_free	io.F90	/^  logical, private                :: lun_is_free(/;"	v	module:io
mark	fdf.F90	/^    type(line_dlist), pointer :: mark$/;"	k	type:block_fdf
match	parse.F90	/^    FUNCTION match(/;"	f	module:parse
max_length	fdf.F90	/^  integer(ip), parameter, private :: max_length /;"	v	module:fdf
max_length	parse.F90	/^  integer(ip), parameter, private :: max_length /;"	v	module:parse
max_length	utils.F90	/^  integer(ip), parameter, private :: max_length /;"	v	module:utils
max_lun	io.F90	/^  integer(ip), parameter, private :: min_lun = 10, max_lun /;"	v	module:io
maxa	sample.F90	/^  integer, parameter         :: maxa /;"	v	program:SAMPLE
maxdepth	fdf.F90	/^  integer(ip), parameter, private :: maxdepth /;"	v	module:fdf
maxntokens	parse.F90	/^  integer(ip), parameter, private :: maxntokens /;"	v	module:parse
min_lun	io.F90	/^  integer(ip), parameter, private :: min_lun /;"	v	module:io
morphol	parse.F90	/^    SUBROUTINE morphol(/;"	s	module:parse
mpiflag	fdf.F90	/^  logical                         :: mpiflag$/;"	v	module:fdf
na	sample.F90	/^  integer(sp)                :: i, ia, na,/;"	v	program:SAMPLE
names	parse.F90	/^    FUNCTION names(/;"	f	module:parse
nblocks	parse.F90	/^    FUNCTION nblocks(/;"	f	module:parse
nchars	parse.F90	/^    integer(ip)           :: nchars$/;"	k	type:ptoken
ndepth	fdf.F90	/^  integer(ip), private            :: ndepth$/;"	v	module:fdf
nendblocks	parse.F90	/^    FUNCTION nendblocks(/;"	f	module:parse
next	fdf.F90	/^    type(line_dlist), pointer  :: next$/;"	k	type:line_dlist
nintegers	parse.F90	/^    FUNCTION nintegers(/;"	f	module:parse
nitems	parse.F90	/^    FUNCTION nitems(/;"	f	module:parse
nlabels	parse.F90	/^    FUNCTION nlabels(/;"	f	module:parse
nlines	fdf.F90	/^    integer(ip)               :: nlines$/;"	k	type:fdf_file
nnames	parse.F90	/^    FUNCTION nnames(/;"	f	module:parse
nreals	parse.F90	/^    FUNCTION nreals(/;"	f	module:parse
ntasks	fdf.F90	/^  integer(ip), private            :: rank, ntasks$/;"	v	module:fdf
ntokens	parse.F90	/^    FUNCTION ntokens(/;"	f	module:parse
ntokens	parse.F90	/^    integer(ip)           :: ntokens$/;"	k	type:parsed_line
nunits	io.F90	/^  integer(ip), parameter, private :: nunits /;"	v	module:io
nvalues	parse.F90	/^    FUNCTION nvalues(/;"	f	module:parse
packlabel	utils.F90	/^    SUBROUTINE packlabel(/;"	s	module:utils
parse	parse.F90	/^MODULE parse$/;"	m
parse_debug	parse.F90	/^  logical, private                :: parse_debug /;"	v	module:parse
parse_log	parse.F90	/^  integer(ip), private            :: parse_log /;"	v	module:parse
parsed_line	parse.F90	/^  type parsed_line$/;"	t	module:parse
parses	parse.F90	/^    SUBROUTINE parses(/;"	s	module:parse
phonon_energy	sample.F90	/^  real(dp)                   :: cutoff, phonon_energy,/;"	v	program:SAMPLE
pline	fdf.F90	/^    type(parsed_line), pointer :: pline$/;"	k	type:line_dlist
pline	sample.F90	/^  type(parsed_line), pointer :: pline$/;"	v	program:SAMPLE
prec	prec.F90	/^MODULE prec$/;"	m
prev	fdf.F90	/^    type(line_dlist), pointer  :: prev$/;"	k	type:line_dlist
ptoken	parse.F90	/^  type ptoken$/;"	t	module:parse
rank	fdf.F90	/^  integer(ip), private            :: rank,/;"	v	module:fdf
reals	parse.F90	/^    FUNCTION reals(/;"	f	module:parse
s2arr	utils.F90	/^    FUNCTION s2arr(/;"	f	module:utils
s2i	utils.F90	/^    FUNCTION s2i(/;"	f	module:utils
s2r	utils.F90	/^    FUNCTION s2r(/;"	f	module:utils
search_fun	parse.F90	/^    FUNCTION search_fun(/;"	f	module:parse
search_sub	parse.F90	/^    FUNCTION search_sub(/;"	f	module:parse
setdebug	parse.F90	/^    SUBROUTINE setdebug(/;"	s	module:parse
setlog	parse.F90	/^    SUBROUTINE setlog(/;"	s	module:parse
setmorphol	parse.F90	/^    SUBROUTINE setmorphol(/;"	s	module:parse
sp	prec.F90	/^  integer, parameter :: sp /;"	v	module:prec
status	sample.F90	/^  character(20)              :: fname, axis, status$/;"	v	program:SAMPLE
stderr	io.F90	/^  integer(ip), private :: stderr /;"	v	module:io
stdout	io.F90	/^                          stdout /;"	v	module:io
str	fdf.F90	/^    character(len=max_length)  :: str$/;"	k	type:line_dlist
symbol	sample.F90	/^  character(2)               :: symbol(/;"	v	program:SAMPLE
token	parse.F90	/^    character, pointer    :: token(/;"	k	type:ptoken
tokens	parse.F90	/^    FUNCTION tokens(/;"	f	module:parse
utils	utils.F90	/^MODULE utils$/;"	m
values	parse.F90	/^    FUNCTION values(/;"	f	module:parse
warn	utils.F90	/^    SUBROUTINE warn(/;"	s	module:utils
wmix	sample.F90	/^  real(sp)                   :: wmix$/;"	v	program:SAMPLE
xa	sample.F90	/^  real(dp)                   :: xa(/;"	v	program:SAMPLE
