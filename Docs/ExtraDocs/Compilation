
\section{COMPILATION}

Brief tutorial on the new compilation scheme, with advantages and pitfalls.

Rather than using the top-level Src directory as building directory,
the user has to use an ad-hoc building directory (by default the
top-level Obj directory, but it can be any (new) directory in the top
level.  The building directory will hold the object files, module
files, and libraries resulting from the compilation of the sources in
Src.  The VPATH mechanism of modern 'make' programs is used. This
scheme has many advantages. Among them:

\begin{itemize}
\item The Src directory is kept pristine.
\item Many different object directories can be used concurrently to
  compile the program with different compilers or optimization levels.
  (see below the NOTE for Advanced Users)
\end{itemize}

If you just want to compile the program, go to Obj and issue the command:

\begin{verbatim}
  sh ../Src/obj_setup.sh
\end{verbatim}

to populate this directory with the minimal scaffolding of makefiles, and
then make sure that you create or generate an 'arch.make' file. Then, type

\begin{verbatim}
  make
\end{verbatim}

To compile utility programs (those living in Util), you can just simply
use the provided makefiles, typing "make" as appropriate.

\noindent
{\it NOTE for Advanced Users}

The mechanism described here can be repeated in other directories at
the same level as Obj, with different names. Simply provide the appropriate
arch.make, and issue the setup command above. To compile utility
programs, you need to use the form:

\begin{verbatim}
   make OBJDIR=ObjName
\end{verbatim}

where {\tt ObjName} is the name of the object directory of your choice. 


