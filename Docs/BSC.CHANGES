Record of changes leading up to merge of BSC branch.

------------------------------------
303 Alberto Garcia	  2010-10-19
Merged some precision changes in m_ts* modules
  
* R. Grima had already fixed the precision of the "v" variable (real
  space potential) to be grid_p in the TSVHFix and TSvoltage2
  subroutines (m_ts_in_siesta.F90 module).

* F.D. Novaes had made more cosmetic changes to declarations, which
  have been merged from the trunk:
  
    real*8 --> real(dp)
    complex*16 --> complex(dp)
    double precision --> real(dp)

* The argument list of routine "transiesta" has been shortened.

------------------------------------
302 Alberto Garcia	  2010-10-18
Merge of SiestaXC + timer, alloc, FoX, fixes --> trunk-320

* New siestaXC library including van der Waals functional

Implementation of the non local van der Waals density functional 
of Dion et al (PRL 92, 246401 (2004), PRL 103, 096102 (2009)).

All the exchange-correlation routines have been placed in a library
called siestaXC, whose unique entry point is module m_siestaxc. The
sources are in subdirectory Src/SiestaXC, whose makefile allows to
create a self-contained distribution in file siestaXC.tgz, that can
be used in programs other than siesta. The library sources that are
used by siesta also outside the library (like alloc.F90) remain in
Src, and are copied by SiestaXC/makefile into siestaXC.tgz.

The library is used to compile siesta itself, with a scheme similar
to that used for MPI, fdf and FoX. Pseudo/atom has been also adapted
to use the siestaXC library.

The implementation of the non local van der Waals density functional
has led to a whole rewritting of cellxc and a major one of atomxc.
File xc has been splitted in m_atomxc, m_ldaxc, and m_ggaxc, which
are now modules. The VDW-specific routines are in module m_vdwxc.

The new parallelization of cellxc has led to several new modules, of
which mesh3d is the largest one. It allows new distributions of mesh
points among processors, that can change dynamically. Other relevant
modules are fftr, for 3-D FFTs of real functions. fft3d has changed
to allow (complex) 3-D FFTs using the new distributions of mesh points.
Module mesh1d provides radial (1-D) mesh utilities. Module m_debugXC
writes reports debugXC.node$$ with details of mesh distributions.

NOTE: The BSC version of cellxc (including its unique "LINEAR" parallel
distribution) has been kept in the code, and it is enabled at compile
time by defining the BSC_CELLXC pre-processor symbol.

(Jose Soler (UAM), with help by Alberto Garcia (ICMAB), Rogeli Grima
(BSC) , and Jose Maria Cela (BSC))

* The new m_timer module, together with changes in MPI/mpi_siesta, allows
the profiling of MPI communication times, for each routine that calls 
timer, after compiling with -DMPI_TIMING. Routine timer itself remains 
external, but it uses m_timer operationally.

* The full accounting and reporting of allocated arrays is now done in
module alloc, and printed in (SystemLabel).alloc. The old 'memory'
routine now passes information to alloc for this accounting, rather
than the other way around. Therefore, the 'total' allocation sizes
given by memory routine are no longer complete, though they are still
printed.

* Incorporate some of J. Soler's documentation and conciseness changes
  to meshsubs (but note that the distribution of the indexp array had
  already been implemented separately by Rogeli Grima).

* Partially merged J. Soler's changes for a correct accounting of
array allocation. Both the 'name' and 'routine' arguments should be
identical (including case sensitivity) in the corresponding calls to
re_alloc and de_alloc of an array.  The two arguments are combined
into an internal name as trim(routine)//' '//name, so that
(name='rho',routine='dhscf') is equivalent to (name='dhscf rho'). This
is the name printed in the allocation report. NOTE: Rogeli Grima had
been making similar changes. To avoid a painful merging, most of the
detailed changes by J. Soler have been temporarily left out, pending
another review.

* The (mainly obsolete) 'nodes' option for basis orbital generation was
producing orbitals with one excess radial node (i.e. one and two nodes
for double zeta, instead of zero and one node). Corrected.

* Clarification of the use of *_last geometry information (A. Garcia)

The variables xa_last (formerly xalast), ucell_last, and scell_last
are used to hold the information related to the last geometry for
which the electronic structure has been computed. This is necessary
since the "siesta_move" routine updates the geometry after every step.
By using the "*_last" variables instead of "xa", "ucell", and "scell",
we make sure that "siesta_analysis", when calculating the
polarization, optical properties, etc, uses the coordinates actually
used to compute the electronic structure.

The *_last variables are set at the beginning of "siesta_move", before
the actual displacements. Due to a bug in the program, however, this
was being done only at the final scheduled step ('fincoor'), instead
of inconditionally after every step. Thus they could be used undefined
if, for example, a relaxation finishes before the scheduled number of
steps (which is typical).

While fixing this bug, it became apparent that some other sections of
"siesta_analysis" are using the "predicted" coordinates (the output of
coordinates in various formats) instead of the last "used"
coordinates. This can be considered a feature or a bug.

Similarly, the computation of the spin polarization uses a density
matrix that is actually the result of a mixing after the last SCF
step.

(Fix prepared by A. Garcia after the discovery of the bug by J. Gale)

* Support for the Armiento and Mattson's  functional added (From J. Gale)

Support for the AM05 functional has been added to routines in SiestaXC 
and Pseudo. This is done using the AM05 subroutines distributed by 
Armiento and Mattson, under the terms of the conditions contained within 
the header to their software allowing modification and redistribution 
provider the original copyright header remains. 

A new module, am05, contained within the file SiestaXC/am05.f90, has been 
added containing the code from Armiento and Mattsson. Within ggaxc.f90 
a wrapper has been added, am05xc, to pass the variables from ggaxc to 
am05 subroutines and handle the return arguments appropriately. 

In the atom program the two-letter symbol "am" has been added for AM05.
In SIESTA the GGA Authors are "AM05".

A test of the AM05 functional added in h2o_am05.

* Add support for PBESol XC functional (J. Gale)

* Update FoX library and add XML.AbortOnErrors and XML.AbortOnWarnings
  (From A. Walker)

It is sometimes useful for warnings or errors generated by the FoX
libary to result in an abort to generate a core dump or stack trace to
see where in Siesta the call causing the error is being made. It is
now possible to turn on this behaviour at runtime using two new fdf
boolean tags:

 XML.AbortOnErrors  XML.AbortOnWarnings

Both are boolean and default to .false. (which mirrors the current
stopping behaviour).

These features have been made possible by an update in the FoX library
that adds an interface to allow errors and warnings to result in an
abort signal. In the update there is also a fix to work around a PGI
bug for the overloaded wxml interfaces (aparently not used in Siesta)
and a change to the prng to avoid using initalised data in prng_init.

* Other fixes:

Pass FPP_FLAGS to MPI makefile (for MPI_TIMINGS)
Fix intent of g2max in dhscf. Put vmat in a module
Wrap output in timer when MPI_TIMINGS is off 
Use (possibly empty) array section of eold in call.
Fix array actual arguments in ambiguous interfaces

------------------------------------
301 Alberto Garcia	  2010-09-30
Fine-tuning of grid load-balancing and communications

(By Rogeli Grima)

* The load heuristics for the quadratic and "linear" distributions have
been changed to take into account the fact that "vacuum" points do
take some processing time.

* To alleviate communication bottlenecks while changing distributions,
asynchronous mpi sends and receives are used. This means that special
buffers have to be allocated. Asynchronous communications are used by
default, unless the SYNCHRONOUS preprocessor variable is set at compile
time.

* Other relevant changes: 
 
  -- Use eight-byte integers for memory counters
  -- Insertion of some trace markers, with extra mpi barriers, in 
     a few places.

This version still contains code to implement prototype
Jacobi-Davidson iterative diagonalization (with and without the use of
the SLEPC library).

Detail of changes (most relevant):

dhscf:        removal of debugging and some timing sections. Other cosmetics.
alloc:        better name handling for memory accounting
memory:       use 8-byte integers for counters.
memoryinfo:   use 8-byte integers for counters.
cellxc:       insert trace markers
compute_dm:   remove debug sections related to slepc.
diagon:       add debug markers

distriphionmesh: change load heuristics for the quadratic and "linear"
                 distributions. Allocate asynchronous-comms buffers.
fft3d:        use timing
initmesh:     make ntp into an 8-byte integer.
initparallel: add debug sections.
mneighb:      use timing

moremeshsubs: add support for asynchronous communications. Rename
              meshDistr variable to distr.
poison:       better declaration of variables. Traces (barriers?)
rhoofd:       turn into .F file to add MPI barriers for traces.
siesta_cmlsubs: avoid the use of 'str' from FoX.
siesta_forces:  use mpi_finalize directly instead of "bye" if 'h_setup_only'.
siesta_init:  traces 
slepc_diagon: reorganization.
timer:        cosmetics
vmat:         turn into .F file to add MPI barriers for traces.

modified:
  Src/alloc.F90
  Src/cellxc.F
  Src/compute_dm.F
  Src/deflatedmv.F
  Src/dhscf.F
  Src/diagon.F
  Src/distriphionmesh.F
  Src/fft3d.F
  Src/initatom.f
  Src/initmesh.F
  Src/initparallel.F
  Src/jacobi_davidson.F
  Src/memory.F
  Src/memoryinfo.F
  Src/mneighb.f
  Src/moremeshsubs.F
  Src/ordern.F
  Src/overfsm.f
  Src/poison.F
  Src/rhoofd.F
  Src/setup_H0.F
  Src/siesta_cmlsubs.F90
  Src/siesta_forces.F
  Src/siesta_init.F
  Src/slepc_diagon.F
  Src/timer.F
  Src/vmat.F
  Src/write_subs.F

------------------------------------
300 Alberto Garcia	  2010-09-29
Updates to fdf and dhscf (grdsam, doping)

* Make fdf_single and fdf_double accept integers
  (fixed version, including call to 'values')

* Define proper kind parameters in fdf/prec.F90

* Increase width of ik field in OCCS file

* Re-implement the doping feature in the uniform distribution

In this way it is much easier, since we can refer directly to the
points at which rhoatm is different from zero, without having to use
any indexes. In fact, this could be done in any distribution, as long
as both rho and rhoatm are distributed in the same way.

* Fix grdsam by adding a call to dhscf_init

Still some more cleanup possible: remove samesh check.

removed:
  Src/doping.F
added:
  Src/doping_uniform.F
modified:
  Src/Makefile
  Src/dhscf.F
  Src/diagk.F
  Src/diagk_file.F
  Src/fdf/fdf.F90
  Src/fdf/prec.F90
  Src/grdsam.F

------------------------------------
299 Alberto Garcia	  2010-02-22
Merge of SLEPC work by Rogeli Grima (in progress)

New routines to use the SLEPC library for diagonalization.

Note that some sections depend on the use 
of the _SLEPC_ preprocessor symbol.

(Extra timing stills depends on __PPC970__)

added:
  Src/slepc_diagon.F
modified:
  Docs/Grid-Work.CHANGES
  Src/Makefile
  Src/compute_dm.F
  Src/domain_decom.F
  Src/gmres.F
  Src/initparallel.F
  Src/jacobi_davidson.F
  Src/siesta_forces.F
  Src/siesta_init.F
  Src/siesta_options.F90
  version.info


------------------------------------
298 Alberto Garcia	  2010-02-22
Clarify timing in dhscf

The timing tags in dhscf were wrong. Now there is a new set for
DHSCF_Init.

------------------------------------
297 Alberto Garcia	  2010-02-19
More data on sizes. Optional stop after H setup. Cleanup

* If the fdf variable "H-Setup-Only" is "true", the program will stop
  after setting up the hamiltonian in the first iteration, just before
  diagonalization. This is useful to benchmark the new grid routines.

* Removed dead code in InitMesh

* Several mesh routines now print data about sizes.

* Temporarily deactivated the "doping" option and the "grid cell sampling"
  option.

modified:
  Src/dhscf.F
  Src/doping.F
  Src/grdsam.F
  Src/initmesh.F
  Src/phionmesh.F
  Src/setupextmesh.F
  Src/siesta_forces.F
  Src/siesta_options.F90

------------------------------------
296 Alberto Garcia	  2010-02-19
Merged work by Rogeli Grima on mesh routines, with some bug fixes

(Work in progress)

There were some bugs in dhscf and in moremeshsubs, found after
painstakingly commenting the flow of the program.

* dhscf and dhscf_init have been merged in a true module m_dhscf, still
  in file dhscf.F. 

* The mesh initialization part is now done *unconditionally* in
  dhscf_init, i.e, after *every* geometry change, even if the change
  does not involve a cell change. The reason is to avoid complexity,
  since now the mesh parallel distributions will depend on the
  detailed atomic positions even if the cell does not change.
  Besides, the relative cost of a "mesh only" initialization is
  negligible.  The only real observable effect would be a printout of
  "initmesh" data at every geometry iteration.

* The variables "nm" and "nsm" are no longer imported in 'moremeshsubs'
  from module m_dhscf. In fact, nmeshg from module mesh is used instead
  of nm (which is abused as an argument in several routines).

* Routine distMeshData (real version) had a bug when running in serial
  mode and asked to "keep" the clustering or sequential character: it 
  did not copy the input to the output array.

* The change in distribution of the 'drho' array did not take into
  account the spin dimension.

Remaining known bugs:

 - grdsam needs to call dhscf_init before calling dhscf
 - the doping routine needs to be called in the quadratic dist
 - the calculation of the Berry-phase polarization in the first
   iteration of test 'born_spin' is wrong.

------------------------------------
295 Alberto Garcia	  2010-01-25
Update to m_efield and doping modules.

Bring in the in-line documentation in synch with siesta-3.0




      



