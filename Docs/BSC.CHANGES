Record of changes leading up to merge of BSC branch.

------------------------------------
324 Alberto Garcia	  2010-12-01
Work around bugs in Intel compilers: FoX generics, k-grid

* Work around a bug in Intel12 compiler in k-grid setup

A dummy internal write is used to re-focus the compiler
treatment of a few integer variables.

modified:
  Src/find_kgrid.F
  Src/kgrid.F
  Src/kgridinit.F

* Avoid use of generics in declarations in FoX format routine

The use of generic functions in declaration statements was confusing
the Fortran compiler (version >= 11). They have been replaced by calls
to the specific versions.

modified:
  Src/FoX/fsys/fox_m_fsys_format.F90

------------------------------------
323 Alberto Garcia	  2010-11-26
Fix setting of applied electric field in parallel

Due to a programming error, the user-specified electric
field was not correctly set in non-master nodes.

Thanks to Alexander Vozny for the bug report.

modified:
  Src/m_efield.F

------------------------------------
322 Alberto Garcia	  2010-11-24
Remove non-finished iterative diagonalization code

The Jacobi-Davidson (including slepc) code has been
removed as it is not ready for merging. A number of
auxiliary files have been deleted.

removed:
  Src/cg.F
  Src/cholesky.F
  Src/deflatedmv.F
  Src/domain_decom.F
  Src/gmres.F
  Src/jacobi_davidson.F
  Src/lenstr.F
  Src/matrixop.F
  Src/mmio.F
  Src/precond.F
  Src/printmatrix.F
  Src/pspltm1.F
modified:
  Src/Makefile
  Src/Sys/atto-pgf95-openmpi.make
  Src/compute_dm.F
  Src/hsparse.F
  Src/initparallel.F
  Src/parallelsubs.F
  Src/siesta_end.F
  Src/siesta_options.F90
  Src/write_subs.F
  Util/Denchar/Src/Makefile

------------------------------------
Start of interim branch bsc-grid+fdf
------------------------------------

------------------------------------
321 Alberto Garcia	  2010-11-24
Write electronic temperature while processing options 

modified:
 Src/siesta_options.F90

------------------------------------
320 Alberto Garcia	  2010-11-23
Timing routine output. Positions of neighbors in BONDS file

* Clarify the output of the timing routine

The timing routine now prints zeros instead of NaNs in the
communications section if the variable MPI_TIMING is not defined, and
an informational note.

modified:
  Src/m_timer.F90

* Modify bonds routine to print real locations of neighbors

In routine bonds (called at the beginning and at the end of the
program) we now print the real location of the neighbor atom in space,
and not, as in earlier versions, the location of the equivalent
representative in the unit cell.

modified:
  Src/bonds.f

------------------------------------
319 Alberto Garcia	  2010-11-17
Fine tuning of Util compilation

Some minor details needed fixing:

- New dependencies when BSC_CELLXC is defined
- "default" targets need to appear before inclusion of arch.make

removed:
  Util/TBTrans/MPI/
modified:
  Src/Makefile
  Util/Contrib/APostnikov/Makefile
  Util/Gen-basis/Makefile
  Util/Optimizer/Makefile

------------------------------------
318 Alberto Garcia	  2010-11-16
Fix compilation of Utils

The major remaining issues were:

- New-style fdf calls

- Proper treatment of "private" copies of fdf, MPI, etc

- The macro __FILE__ expanded to a very long string in the fdf
  routines. A new macro THIS_FILE has been defined instead.

Some issues might still remain. Notably, the dependency lists are very
cumbersome.

removed:
  Util/Denchar/Src/fdf/.dummy_dir
  Util/Gen-basis/fdf/.dummy_directory
  Util/TBTrans/Libs/
  Util/TBTrans/Libs/.dummy_directory
  Util/TBTrans/MPI/.dummy_dir
  Util/VCA/fdf/.dummy_directory
  Util/Vibra/Src/fdf/.dummy_directory
added:
  Util/Denchar/Src/timer_local.f
modified:
  Src/fdf/fdf.F90
  Src/fdf/io_fdf.F90
  Src/fdf/parse.F90
  Util/Denchar/Src/Makefile
  Util/Denchar/Src/denchar.f
  Util/Denchar/Src/local_reinit.f
  Util/Denchar/Src/readpla.f
  Util/Denchar/Src/readsts.f
  Util/Gen-basis/Makefile
  Util/Helpers/Makefile
  Util/TBTrans/Makefile
  Util/TBTrans/m_tbt_options.F90
  Util/TBTrans/mkqgrid.f
  Util/VCA/Makefile
  Util/Vibra/Src/Makefile
  Util/Vibra/Src/fcbuild.f
  Util/Vibra/Src/klines.f
  Util/Vibra/Src/recoor.f
  Util/Vibra/Src/vibrator.f

------------------------------------
317 Alberto Garcia	  2010-11-12
Merge 3.0 fixes: ps reparametrization, getopts, ioncat, atm manual

* Cosmetic fixes in Gen-basis/{ioncat,ionplot.sh}

modified:
  Util/Gen-basis/ioncat.f
  Util/Gen-basis/ionplot.sh

* Fix test in m_getopts

A double if test gives problems with some compilers when
bounds checking is in effect.

modified:
  Src/m_getopts.f90

* Improved grid for re-parametrization of pseudopotentials

When the option Reparametrize.Pseudos is in effect, the program
resamples the pseudopotential data into a new logarithmic grid with
parameters chosen so that the grid-point separation at the typical rcs
for orbitals is small enough (of the order of 0.01 bohr). The previous
choice of parameters resulted in grid-point separations of the order
of 0.005 bohr near the origin, which apparently is not fine enough for
s orbitals, leading to oscillations in the gradient near the origin.

A new set of default parameters has been chosen to provide a finer
grid spacing (1.e-5 bohr) near the origin and 0.01 bohr around r=10
bohr. This results in grids with around 10000 points, which is still
manageable.

( Also, a few extra diagnostic files are produced if the option
  Write.Ion.Plot.Files is in effect, and the .psdump file now
  contains the core charge )

modified:
  Src/atmparams.f
  Src/atom.f
  Src/basis_specs.f
  Src/pseudopotential.f
  Docs/siesta.tex

* Update atom manual

- Include a mention of the "fractional atomic number" capability.

- Update the link to Jose Luis Martins' version of the atom program, and
  the contact information in the README file.

modified:
  Pseudo/atom/Docs/atom.tex
  Pseudo/atom/README

------------------------------------
316 Alberto Garcia	  2010-11-12
Fix import of mpi module in matrixop + new .make files

Use 'mpi_siesta' instead of 'mpi'.

Added new .make files in Src/Sys.

added:
  Src/Sys/atto-pgf95-openmpi.make
  Src/Sys/intel10-openmpi.make
  Src/Sys/intel11-openmpi.make
  Src/Sys/nano-intel10-mvapich.make
  Src/Sys/pgf95-pgimpi.make
modified:
  Src/Sys/nano-intel-mpi.make
  Src/matrixop.F

------------------------------------
315 Alberto Garcia	  2010-11-12
Remove calls to printmemory()

The 'alloc' subsystem no longer calls the 'memory' accounting routine,
so any information printed by 'printmemory' is misleading. The calls
have now been commented out.

modified:
  Src/setup_H0.F
  Src/siesta_end.F
  Src/siesta_forces.F
  Src/siesta_init.F
  Src/siesta_move.F

------------------------------------
314 Alberto Garcia	  2010-10-29
Disabled asynchronous grid communications by default

* The asynchronous code in moremeshsubs.F introduced in revno 301
gives wrong results for the forces in GGA calculations.  This code has
been disabled by default, and should not be used until it is fixed. It
can be enabled by defining

ASYNCHRONOUS_GRID_COMMS

at compile time.

* Fixed a syntax bug in a BSC_CELLXC block in dhscf.F

* Made grdsam into a module

* Added a new test mgc-force, to quickly check forces with GGA

added:
  Tests/mgc-force/
  Tests/mgc-force/makefile
  Tests/mgc-force/mgc-force.fdf
  Tests/mgc-force/mgc-force.pseudos
modified:
  Src/Makefile
  Src/dhscf.F
  Src/final_H_f_stress.F
  Src/grdsam.F
  Src/moremeshsubs.F
  Tests/Makefile


------------------------------------
313 Alberto Garcia	  2010-10-25
Fix fdf- and parse-related bugs in zmatrix processing

There were two significant bugs in the read_zmatrix routine, caused
by the switch to the new parsing framework:

-- Routine fdf_bsearch was attempting to match whole tokens, when
   the intent was simply to find substrings (as in 'mol', 'frac', etc)
   The fix involves the creation of a new routine fdf_substring_search
   which uses the 'index' intrinsic. An unwelcome side effect is that
   the zmatrix keywords *have* to be written in lowercase.

-- The matching mechanism for token class ('i', 'r', 'n', etc) was not
   powerful enough to represent mixtures of real numbers and symbols, as
   it is needed in a typical line of the zmatrix format. Thus new 'virtual'
   token codes have been introduced:

   'x' matches anything
   's' matches i, r, or n
   'j' matches i or n

   These join 'v', which already stood for 'integer or real' ('value').

Other minor bugs involved moving the block pointer when printing the
line (now done printing pline%line directly) and not using '.not.' in 
a few logical tests.

modified:
  Src/fdf/fdf.F90
  Src/fdf/parse.F90
  Src/zmatrix.F

------------------------------------
312 Alberto Garcia	  2010-10-22
Clarify file-name conventions in new fdf in reinit

Change the name of the process-specific scratch files to
a more meaningful 'fdf_input.XXX'.

Note that these files could be made obsolete by a proper
serialization-broadcast-deserialization of the new fdf data structure.

------------------------------------
311 Alberto Garcia	  2010-10-21
Fixes: optical, pulay, cosmetics. BS energy, HSX file (--> trunk 361)

*  Improved documentation of VDW-KBM functional
  
  (J. Soler)
  
  modified:
    Docs/siesta.tex
    Src/SiestaXC/atomxc.F90
    Src/SiestaXC/cellxc.F90
    Src/SiestaXC/siestaxc.F90
    Src/SiestaXC/vdwxc.F90
    Src/SiestaXC/xcmod.f90

*  (Admin) Incorporate logs of recent patches from 3.0 branch
  
  The siesta-3.0 branch can be considered as a sort of "bug-fix" branch
  for "trunk". Hence, periodic merges are needed. This merges
  have up to now been done in a "cherry-picking" manner, since 3.0
  contains other material that is not supposed to go into trunk. This
  has the unfortunate feature that the patch logs are not incorporated
  into the trunk, and a "bzr missing" command will keep reporting
  spurious differences.
  
  The logs of all the recently applied patches, corresponding to 3.0
  patches up to 3.0-rc2, have now been incorporated by doing a normal
  merge followed by "bzr revert ." to remove all file changes (changes
  already incorporated in local revnos from 349 up to this one).  This
  has the effect of marking those patches in siesta-3.0 as "known" to
  this branch, and will simplify the porting of future patches from the
  3.0 branch. Note that the patch logs do not appear in "bzr log" unless
  the "-n0" option is used. This is desirable, as a casual user might
  find the output confusing.
  
  Note that revno 355 in trunk already incorporated (without
  explicit mention in the commit log, due to an oversight) the relevant
  3.0 patches up to 3.0-rc1.
  
*  Fixes for portability (pulay, MD rewind, reshape)
  
  * In m_pulay, some compilers evaluated both sub-clauses of an "and"
    expression, even if the first was .false.. This led to a division by
    zero in a mod operation. The expression has been replaced by more
    robust code.
  
  * The MD file repositioning code in iomd.f gave problems in some
    systems. It has been removed, and substituted by an explicit
    'position="append"' clause in the open statement.
  
  * In SiestaXC/mesh3d.F90, work around a gfortran bug in the reshape
    intrinsic by specifying a zero lower bound. The bug only appears
    if bounds checking is in effect.
  
  modified:
   Src/m_pulay.F90
   Src/iomd.f
   Src/SiestaXC/mesh3d.F90

*  Cosmetic fixes (larger fields in atm files, vibra manual)
  
  * Use larger output fields for atm diagnostic files
  
  The atm program generates, among others, the files FOURIER_QMAX and
  ECONF_DIFFS, which contain information useful for optimization
  runs. The output fields were quite tight and sometimes
  overflowed. They have beeen made larger.
  
  modified:
    Pseudo/atom/prdiff.f
    Pseudo/atom/wrapup.f
  
  * Clarify the meaning of the supercell options in the Vibra manual
  
  New wording to make it clear that the supercell options refer
  to the number of augmentation shells around the unit cell.
  
  modified:
    Util/Vibra/Docs/vibra.tex

*  Compute and print band-structure energy. Updates to Util/COOP/mprop
  
  * The band-structure energy Ebs = Tr(DM*H) is now computed at every 
    iteration and printed at the beginning and end of the SCF cycle, both
    in the output file and in the CML file. The calculation is done in  
    compute_dm, so DM is the "output DM" from the diagonalization of H.
  
  * The mprop program has been updated to output the integrated
    band-structure energy as a function of energy as a third column in
    the integrated-dos file. The " -n " option has been documented.
  
  * Creation of Util/COOP/Docs, and addition of some notes on the units
    and meaning of the COOP and COHP curves.
  
  added:
    Util/COOP/Docs/
    Util/COOP/Docs/UnitsAndMeaningOfCurves.txt
    Util/COOP/Tests/README
  modified:
    Src/Makefile
    Src/compute_dm.F
    Src/m_energies.F90
    Src/write_subs.F
    Util/COOP/README
    Util/COOP/main_vars.f90
    Util/COOP/mprop.f90
    Util/COOP/subs.f90

*  Make the HSX format the default for H,S files
  
  The old HS format was highly inefficient, as each piece of data was
  written to its own record. In addition, it only contained information
  about the inter-orbital vectors Xij if k-points were used in the
  calculation.
  
  The new HSX file format was introduced at the time of the first
  COOP/COHP implementation. It is more tightly packed, and the real
  arrays (H, S, and Xij) are written in single-precision.
  
  The HSX format is now the default in Siesta (TranSiesta has its own
  format).
  
  The programs hsx2hs and hs2hsx in Util/HSX are provided to facilitate
  the transition. Note however that an HS file written by Siesta during
  a Gamma-only calculation will not contain information about the
  inter-orbital vectors Xij, and hs2hsx will refuse to create an HSX
  file from it.
  
  See Util/HSX/README for more details.
  
  The file iohs.F has been moved to Util/HSX from the main source
  directory.
  
  added:
    Util/HSX/hs2hsx.f90
    Util/HSX/hsx2hs.f90
    Util/HSX/makefile
  renamed:
    Src/iohs.F => Util/HSX/iohs.F
  modified:
    Docs/siesta.tex
    Src/Makefile
    Src/setup_hamiltonian.F
    Util/HSX/README
    Util/HSX/hsx_m.f90

*  Hook to output the initial charge density
  
  If the fdf variable SaveInitialChargeDensity is "true", the program
  generates a RHO_INIT (and a RhoInit.grid.nc file if netCDF is compiled
  in) containing the charge density used to start the first
  self-consistency step, and it stops. Note that if an initial density
  matrix (DM file) is used, it is not normalized. This is useful to
  generate the charge density associated to "partial" DMs.
  
  modified:
    Docs/siesta.tex
    Src/dhscf.F
    Src/setup_hamiltonian.F
    Src/siesta_options.F90

*  Fixes and new functionality in Pulay mixing
  
  * The "kick" functionality intended to "shake" periodically the Pulay
  mixing procedure was incorrectly implemented. This has now been fixed,
  with the added feature that the Pulay history is completely reset
  after a kick.
  
  * Additionally, support has been added to specify whether the first
  density-matrix residual of the SCF cycle and the first residual after
  a kick are included in the Pulay history. It can be argued that in
  these cases the "output" DM might be significantly different from the
  "input" DM. To preserve backwards compatibility, these residuals are
  kept in the Pulay history unless the fdf variable
  
        DM.Pulay.Avoid.First.After.Kick
  
  is set to "true" in the input file.
  
  * The above changes have forced a temporary disabling of the "Pulay on
    file" feature, which will be re-implemented in a form that works
    well in parallel.
  
  * Updated the manual.
  
  (A. Garcia)
  
  renamed:
    Src/m_pulay.F => Src/m_pulay.F90
  modified:
    Src/mixer.F
    Src/siesta_options.F90
    Src/m_pulay.F90
    Docs/siesta.tex

*  Fixes and improvements in the optical spectra code
  
  * Fixed a bug in optical.F: the call to subroutine kgridinit nwas
    causing problems and providing results that were not compatible any
    longer with those of subroutine kgrid.
  
  * Modified call to subroutine transition_rate: wmin and wmax passed to
    subroutine so that only the relevant transition probabilities are
    explicitly calculated.
  
  * Added a new test (Tests/si-optical) to exercise the optical code.
  
  (Daniel Sanchez Portal)
  
  added:
    Tests/Reference-xml/si-optical.xml
    Tests/Reference/si-optical.out
    Tests/si-optical/
    Tests/si-optical/makefile
    Tests/si-optical/si-optical.fdf
    Tests/si-optical/si-optical.pseudos
  modified:
    Docs/CHANGES
    Src/optical.F
    Src/transition_rate.F


------------------------------------
310 Alberto Garcia	  2010-10-20
Updates and fixes to the TranSiesta/tbtrans code (--> trunk-352)
  
  This patch includes bug fixes (in TranSiesta and tbtrans), a cleanup
  involving removal of dead code, proper declarations of variables, and
  a new prototype test framework for TranSiesta and tbtrans.
  
  1. Fixed the issues related to the density matrix in a TS run, due to the
  changes in new_dm.F
    
  * The new module m_ts_iodm.F is the equivalent of m_iodm.F, created to
  handle .TSDE files. These, are just like .DM files but where the Escf
  sparse matrix and the Fermi Energy are written at the end of the
  file. The makefile was modified in order to include this module.
  
  * The new_dm module now has a cleaner Transiesta related structure.
  The possibility of doing a "continuation run" (where a .TSDE file is
  read and the run starts with a TS calculated density matrix), is
  handled by calling the routine read_dynamic_ts_dm.  Since Transiesta
  also stores and reads Escf, the variable EDM_tmp has been created and
  is used in the same way as D_tmp.  The routine change_sparsity is also
  used for Escf. But these parts of the code have not been tested yet,
  since it would require a change in the sparsity., by atomic
  rearrangements.
    
  
  added:
    Src/m_ts_iodm.F
  modified:
    Src/Makefile
    Src/new_dm.F
  
  
  2. Changed the way mixH or mixDM are internally handled. Added a
  global_vars module.
  
  * Created the module m_ts_global_vars.f90 that contains the TS
  variables that are accessed in different parts of the code and are not
  passed as dummy arguments.
  
  * Considerable changes were made in the way the possibility of mixing
  either the density matrix or the hamiltonian is handled internally.
  The VIn and VOut pointers are still used, but now, instead of
  allocating some memory and copying the values of Dscf (H) to them,
  they directly point to either the Dscf and Dold matrices OR to H and
  HOld. The latter vector is allocated only whe mixH=.true., and this
  implies that in this case more memory will be required since Dold is
  also allocated because it is used in other parts of the code.  In any
  case, this leads to a smaller amount of allocated memory. The coding
  is clearer also, specially at the siesta_forces routine.
  
  
  added:
    Src/m_ts_global_vars.f90
  modified:
    Src/Makefile
    Src/compute_dm.F
    Src/dhscf.F
    Src/m_ts_iodm.F
    Src/m_ts_options.F90
    Src/mixer.F
    Src/new_dm.F
    Src/scfconvergence_test.F
    Src/setup_hamiltonian.F
    Src/siesta_forces.F
    Src/state_init.F
    Src/write_subs.F
  
  3. Cleaning of m_ts modules; set grid variables to be defined with
  grid_p; and smaller changes.
  
  * Removed unused variables and dummy arguments (all m_ts modules).
  Also specified what is used from each module with the idiom "use
  MODULE, only:"
  
  * For the TSVHFix and TSvoltage2 subroutines (m_ts_in_siesta.F90
  module), fixed the precision of the "v" variable (real space
  potential) to be grid_p.
  
  * The following cosmetic declaration changes were made:
  
  real*8 --> real(dp)
  complex*16 --> complex(dp)
  double precision --> real(dp)
  
  where "dp" comes from the precision module.
  
  * IOnode was incorrectly set to be node=1, now it is node=0
    (m_ts_in_siesta.F)
  
  * Removed the initH variable from several routines. (new_dm,
  scfconvergence_test, setup_hamiltonian,siesta_forces)
    
    
  modified:
    Src/compute_dm.F
    Src/m_ts_contour.F
    Src/m_ts_electrode.F90
    Src/m_ts_in_siesta.F
    Src/m_ts_io.F90
    Src/m_ts_options.F90
    Src/m_ts_scattering.F
    Src/new_dm.F
    Src/scfconvergence_test.F
    Src/setup_hamiltonian.F
    Src/siesta_forces.F
  
  4. Assortment of changes/fixes in TBTrans.
  
  * The original version of TBTrans (by M. Brandbyge) was not
  parallelized.  Some of the original properties computed by tbtrans
  (the transmission function and the pdos) have been "ported" to work
  also in the parallelized version of the code, but some have not. Those
  who have not, have been, for now, deleted (atompdos, coop and NetCDF
  related things).
  
  * The transmission function is now multiplied by two in the
  case of non spin-polarized calculations. As a consequence, the
  computed current is multiplied too.
  
  * The printed value of the pdos (averaged over all the k-points), when 
  running in parallel with more than one node, was not correct: only the values 
  coming from the node=0 were being printed. This has been fixed.
  
  * Some smaller changes were done on the way the results are written in the output 
  files (e.g. including blank lines in between values for each k-point, so that 
  the file can be directly plotted with xmgrace).  Also changed the name of the 
  routine "Tsiokp" (m_tbt_kpoints.F90) to "get_kp_on_node" since it represents 
  better what it really does.
  
  removed:
    Util/TBTrans/atompdos.F
    Util/TBTrans/coop.f
    Util/TBTrans/OutputRegionData.F
    Util/TBTrans/OutputRegionData.NoLowdin.F
    Util/TBTrans/netcdfwrite.F
  modified:
    Util/TBTrans/Makefile
    Util/TBTrans/m_tbt_gf.F90
    Util/TBTrans/m_tbt_kpts.F90
    Util/TBTrans/m_tbt_options.F90
    Util/TBTrans/tbtrans.F
  
  5. Created a test directory (ts_fast) to test TranSIESTA and
  TBTrans. (F.D.Novaes/A.Garcia)
  
  * An automatic test for transiesta and tbtrans can be run by going to 
  the $OBJDIR/Tests directory, and typing:
  
    make ts
  
  and to clean:
  
    make clean_ts
  
  For now, only the tests contained in the ts_fast directory will be
  executed, and more tests with similar structure will be added in the
  near future.  The script first runs the electrode calculation, then
  the scattering region calculation and finally tbtrans. If during any
  of these steps there is an error message sent to stderr, the script
  will stop and the following step will not start. The error message is
  printed to an output file (err_elec.out or err_scat.out or
  err_tbt.out). It only creates the "completed" file if it reaches the
  end.
  
  Parallel compilations can be tested by changing to the ts_fast directory 
  and (for example) typing:
   
    make TS="/opt/openmpi.gcc.gfortran/bin/mpirun -np 2 ../../../transiesta"
  
  By default, tbtrans will be (re)compiled using the arch.make located
  in the $OBJDIR.  To use an already compiled version of tbtrans (again,
  inside the ts_fast directory) type:
    
    make TBT=/some/path/to/tbtrans
  
  NOTE: Since the compilation of tbtrans is automatic and unattended,
  you will need to specify in your arch.make the linear algebra libraries
  needed for tbtrans in your system. For example:
  
    TBTRANS_LINALG=linalg.a # Or maybe only: zgeev_lapack.a zgesv_lapack.a
  
  * The functionality for the TS tests is kept in the new file scrip_ts.mk.
  
  added:
    Tests/script_ts.mk
    Tests/ts_fast/
    Tests/ts_fast/H.psf
    Tests/ts_fast/elec.fast.fdf
    Tests/ts_fast/makefile
    Tests/ts_fast/scat.fast.fdf
    Tests/ts_fast/script.sh
  modified:
    Tests/Makefile

------------------------------------
309 Alberto Garcia	  2010-10-20
Assorted fixes: cxa in InitAtomMesh, target stress, ...  (--> trunk-351)

* Fix for out-of-box atoms in meshsubs
  
  In InitAtomMesh, during the calculation of the relative position of an
  atom with respect to the grid, make sure we consider the equivalent
  position inside the cell, even if the atom is outside.
  
  (Possible problem detected by P. Ordejon, fixed by J. Soler)
  
  modified:
    Src/initatommesh.F

* Port several small patches from 3.0 branch up to 3.0-rc2
  
  * Fix initialization of target_stress in some cell-only relaxations
    
  When using the RelaxCellOnly option in tandem with Broyden relaxation,
  the target stress was not properly initialized.
  
  (Thanks to Marcos Verissimo Alves for pointing out the bug and fix)
  
    modified:
      Src/cell_broyden_optim.F
  
  * Print value of dipole if applying correcting field
    
  If the SlabDipoleCorrection option is active, print the computed
  value of the total system dipole at every iteration, to help
  diagnose possible problems.
  
  Added note in the manual warning about the use of non-corrected
  density matrices with this option.
    
    modified:
      Src/Makefile
      Src/dhscf.F
      Docs/siesta.tex
      Src/m_efield.F
  
  * Correction of error in siesta.tex (as discovered by J. Junquera)
  
  The FDF labels DM.Energy.Tolerance and DM.Harris.Tolerance
  were wrongly stated as "real" instead of "real energy", and their
  default value stated with no units when its units are eV.
  
    modified:
      Docs/siesta.tex

------------------------------------
308 Alberto Garcia	  2010-10-20
Tentative fix for DM reuse bug (--> trunk-349)

In some cases the re-use of the DM after a geometry change led to
large values of ddmax and instabilities in SCF convergence. The
tentative cause was the re-allocation of Dscf right after the call to
hsparse for the new geometry, and before new_dm, combined with a
"sparsity pattern change" in-place. When the re-allocation is deferred
to new_dm, and the plain "change_sparsity" routine is used, the
problem seems to disappear. 

Thanks to Oswaldo Dieguez for his sleuthing work.

More testing is needed to close the bug definitively.
  
Modified:
  Src/Makefile
  Src/new_dm.F
  Src/state_init.F

------------------------------------
307 Alberto Garcia	  2010-10-20
New FoX version, new vdw symbols, assorted fixes (--> trunk-348)

*  Use DEBUG_XC preprocessor symbol to wrap SiestaXC debugging (J. Gale)
  
   * Comments wrapped by ! DEBUG in several SiestaXC routines (and in
     related sections of siesta_init and siesta_end) have been replaced
     by #ifdef DEBUG_XC ... #endif so that the writing of debugging files
     can be turned off easily at compile time.
  
     Note that this has forced the change in file extension of a few
     files in Src/SiestaXC, with concommitant changes in the makefiles.
  
  renamed:
    Src/SiestaXC/atomxc.f90 => Src/SiestaXC/atomxc.F90
    Src/SiestaXC/cellxc.f90 => Src/SiestaXC/cellxc.F90
    Src/SiestaXC/fft3d.f90 => Src/SiestaXC/fft3d.F90
    Src/SiestaXC/fftr.f90 => Src/SiestaXC/fftr.F90
    Src/SiestaXC/siestaxc.f90 => Src/SiestaXC/siestaxc.F90
    Src/SiestaXC/vdwxc.f90 => Src/SiestaXC/vdwxc.F90
  modified:
    Src/SiestaXC/lib-arch.make
    Src/SiestaXC/lib-makefile
    Src/SiestaXC/makefile
    Src/SiestaXC/mesh3d.F90
    Src/siesta_end.F
    Src/siesta_init.F
    Src/SiestaXC/atomxc.F90
    Src/SiestaXC/cellxc.F90
    Src/SiestaXC/fft3d.F90
    Src/SiestaXC/fftr.F90
    Src/SiestaXC/siestaxc.F90
    Src/SiestaXC/vdwxc.F90

*  Make sure that units are closed with io_close (J. Gale)
  
   * 'Close' replaced by call to 'io_close' in several routines to
     prevent luns overload.
  
   * Unused declarations of io_assign and io_close removed from diagon.F
     and ksv.f
  
   (Julian Gale)
  
   modified:
     Src/diagon.F
     Src/ksv.f
     Src/m_timer.F90
     Src/moreParallelSubs.F90
     Src/write_orb_indx.f90

*  Support for LMKLL and KBM vdW functionals in ATOM (A. Garcia)
  
   The pseudopotential generation program now accepts the "vl" xc code to
   request the Lee et al. (LMKLL) version of the vdW functional
   (arXiv:1003.5255v1 (2010)), and the "vk" xc code for the vdW
   parametrization of Klimes et al. (KBM) (JPCM 22, 022201 (2009)).
  
   The id strings in .xml pseudo files are, respectively,
   'Lee-et-al--LMKLL', and 'Klimes-et-al--KBM'. For consistency, the id
   string for the Dion functional has been extended to
   'Dion-et-al--DRSLL'
  
   The ATOM manual has been updated, and the version number set to
   3.3.1.
  
   Obsolete xc routines (pre-SiestaXC) have been removed from the
   Pseudo/atom directory.
  
  removed:
    Pseudo/atom/blypxc.f
    Pseudo/atom/ggaxc.f
    Pseudo/atom/ldaxc.f
    Pseudo/atom/pw92xc.f
    Pseudo/atom/pzxc.f
    Pseudo/atom/revpbexc.f
    Pseudo/atom/rpbexc.f
  modified:
    Docs/CHANGES
    Pseudo/atom/Docs/atom.tex
    Pseudo/atom/Makefile
    Pseudo/atom/pseudoXML.f
    Pseudo/atom/velect.f
    version.info

*  Updated makefile dependencies (J. M. Soler)
    
  modified:
    Src/Makefile
    Src/SiestaXC/makefile

*  Added parametrization of Klimes et al for vdW-DF (J. M. Soler)
    
  modified:
      Docs/siesta.tex                  ! Added VDW/KBM
      Src/SiestaXC/Testers/test1.f90   ! Call to B88 GGA exchange
      Src/SiestaXC/atomxc.f90          ! Added VDW/KBM comment
      Src/SiestaXC/cellxc.f90          ! Added VDW/KBM comment
      Src/SiestaXC/ggaxc.f             ! Added Becke-88 exchange routine
      Src/SiestaXC/siestaxc.f90        ! Added VDW/KBM comment
      Src/SiestaXC/vdwxc.f90           ! Call to B88 exchange
      Src/SiestaXC/xcmod.f90           ! Call to vdw_set_author for KBM

*  Documentation completed on LMKLL flavour of vdW-DF (J. M. Soler)
    
  modified:
    Docs/siesta.tex
    Src/SiestaXC/siestaxc.f90
    Src/SiestaXC/vdwxc.f90

*  A bug corrected in testers (J. M. Soler)
    
  modified:
      Src/SiestaXC/Testers/test2.f90  ! Avoid using DRSLL & LMKLL together
      Src/SiestaXC/Testers/test3.F90
      Src/SiestaXC/Testers/test4.F90

*  Added the vdW functional flavour of K.Lee et al, arXiv:1003.5255v1 (2010) (J.M. Soler)
    
  modified:
      Src/SiestaXC/Testers/test1.f90  ! Added PW86
      Src/SiestaXC/Testers/test2.f90  ! Added VDW/LMKLL
      Src/SiestaXC/Testers/test3.F90  ! Added VDW/LMKLL
      Src/SiestaXC/Testers/test4.F90  ! Added VDW/LMKLL
      Src/SiestaXC/atomxc.f90         ! Call to vdw_exchng
      Src/SiestaXC/cellxc.f90         ! Call to vdw_exchng
      Src/SiestaXC/ggaxc.f            ! Added PW86 and PW86R exchange functionals
      Src/SiestaXC/vdwxc.f90          ! Added vdw_exchng and vdw_set_author
      Src/SiestaXC/xcmod.f90          ! Call to vdw_set_author

*  Update FoX to version 4.1.0 (A. Walker)
    
    Version 4.1.0 of FoX, used to produce our XML output was released 
    on 2010-02-09. This patch updates the version shipped with Siesta 
    to this version. 
  
    Changes that affect Siesta are that the build process for FoX can
    now take advantage of possible parallelization (make -j), we can 
    ask FoX to generate an abort signal if it kills the process and 
    the inclusion of work arounds for compiler bugs in recent versions 
    of the pgi compiler. Some of these changes existed in an (unrelased)
    version of FoX shipped with Siesta since revision 320.
   
    modified:
        Src/FoX/FoX-config.in
        Src/FoX/LICENSE
        Src/FoX/Makefile
        Src/FoX/common/FoX_common.F90
        Src/FoX/configure
        Src/FoX/wxml/FoX_wxml.f90
        Src/FoX/wxml/m_wxml_core.F90
        version.info

------------------------------------
306 Alberto Garcia	  2010-10-20
Avoid extrapolation of DM during geometry optimization (--> trunk-339)

  When performing a geometry optimization (CG, Broyden, etc) (idyn=0 in
  the code), there might be sudden jumps in the geometry (e.g., at the
  end of a line-minimization) that render a extrapolation of the DM
  risky. Hence DM extrapolation is turned off in this case.
  
  One might argue that DM re-use should be avoided too.
  
  For "CG" (idyn==0) calculations, the default is not to extrapolate
  the DM (unless requested by explicitly setting
  'DM.AllowExtrapolation' to "true"). The previous step's DM is reused.
  
  modified:
    Docs/siesta.tex
    Src/new_dm.F


------------------------------------
305 Alberto Garcia	  2010-10-20
Assorted fixes, info on orbital indexes, vacuum level (--> trunk-337)

* Small fixes (J.M. Soler)

    modified:
      Src/SiestaXC/debugxc.f90   ! Corrected file name in closeDebugOutputFile
      Src/SiestaXC/ggaxc.f       ! Added spin bounds in array copy
      Src/SiestaXC/mesh3d.F90    ! Added several checks for range of iDistr
      Src/fermid.F               ! Removed a duplicated printout

*  Corrected call to MPI_AllReduce in SiestaXC/Testers/test4.F90 (J.M. Soler)
    
    modified:
      Src/SiestaXC/Testers/test1.f90  ! Increased number of densities tried
      Src/SiestaXC/Testers/test4.F90  ! Corrected call to MPI_AllReduce

*  MPI_grid_real kind adapted to new standard (J.M. Soler)
    
    modified:
      Src/MPI/mpi.F   ! MPI_grid_real=DAT_double unless def GRID_SP

*  A bug corrected by J.D.Gale in the am05 functional (J.M. Soler)
    
    modified:
      Src/SiestaXC/Testers/makefile   ! Copy ../*.mod
      Src/SiestaXC/am05.f90           ! Bug corrected
      Src/SiestaXC/ggaxc.f            ! Corrected call to am05wbs

*  Two minor bugs in SiestaXC 
    
    modified:
      Src/SiestaXC/Testers/test3.F90  ! Add MPI_Finalize
      Src/SiestaXC/Testers/test4.F90  ! Add MPI_Finalize
      Src/SiestaXC/lib-makefile       ! Add am05.o

*  Include AM05 functional in SiestaXC/Testers (J.M. Soler)
    
    The recently-added AM05 functional has been added to those tested by the
    SiestaXC/Testers.
    
    modified:
      Src/SiestaXC/Testers/test1.f90
      Src/SiestaXC/Testers/test2.f90
      Src/SiestaXC/Testers/test3.F90
      Src/SiestaXC/Testers/test4.F90

*   Two mesh-related bugs (From J.M.Soler)
    
    In routine phiOnMesh, function 'size' was used with unassociated pointers.
    This is a bug, although most compilers tolerate it. Unrelated to this,
    in routine divideBox1D, the limits of the first and last boxes was not
    correctly initialized.
    
    modified:
      Src/SiestaXC/mesh3d.F90  ! Initialize partBox(1,1) and partBox(2,nParts)
      Src/meshsubs.F           ! Check pointer associations

*   Bug correction in mesh3d (From J.M.Soler)
    
    A case not taken care of, in routine sameMeshDistr, created an
    out-of-bounds condition that was noticed by J.D.Gale and others.
    Also, a use statement was added for MPI routines in m_mpi_utils.
    
    modified:
      Src/SiestaXC/mesh3d.F90  ! Bug corrected in sameMeshDistr
      Src/m_mpi_utils.F        ! Added use statement for MPI routines
      Src/meshsubs.F           ! Variable JDGdistr saved and initialized

*   Print vacuum level(From J.M.Soler)
    
    The vacuum level, defined as the effective potential at grid points with
    zero density, is printed in the standard output. This is done whenever
    there are such points and either SaveElectrostaticPotential or
    SaveTotalPotential are true. This will be useful to calculate the work 
    function of a surface.
    
    added:
      Src/vacuum_level.f90      ! Computes the vacuum level
    modified:
      Docs/siesta.tex           ! Document side effect of SaveTotalPotential
      Src/Makefile              ! Add vacuum_level.o. Update dependencies
      Src/dhscf.F               ! Call vacuum_level and print it
      Src/moreParallelSubs.F90  ! Make public miscAllReduceInt

*   New GGA functionals with PBE form and parameters from Capelle et al (J.M. Soler)
    
    The four new functionals, with author labels PBE(JsJrLO), PBE(JsJrHEG), 
    PBE(GcGxLO), and PBE(GcGxHGE), have the PBE functional form, but use
    modified values for parameters beta, mu, and kappa. 
    Refs: L.S.Pedroza et al, PRB 79, 201106 (2009)
          M.M.Odashima et al, J. Chem. Theory Comp. 5, 798 (2009)
    
    modified:
      Src/SiestaXC/ggaxc.f     ! New functionals implemented
      Src/SiestaXC/xcmod.f90   ! Increased length for XCfunc and XCauth strings
      Src/atom.f               ! Let xc_check continue even if func. not known
      Src/read_xc_info.F       ! Increased length for XCfunc and XCauth strings

*   Write orbital indexes  (From J.M.Soler)
    
    To assist users in interpreting files like (label).DM and (label).HS, a new
    file called (label).ORB_INDX is written with info on the orbital index order.
    
    added:
      Src/write_orb_indx.f90   ! Writes (label).ORB_INDX
    
    modified:
      Src/Makefile             ! Added write_orb_indx.o + Dependencies updated
      Src/atmfuncs.f           ! Orbital symmetry names completed up to g orbitals
      Src/compute_dm.F         ! Added call to write_orb_indx
      Docs/siesta.tex          ! Docs

*  Name of functional updated in AM05XC to correctly be AM05 (From J. Gale)
  
  modified:
    Src/SiestaXC/ggaxc.f

* Make preprocessor blocks for BSC_CELLXC more concise in dhscf.F (A.G.)

  


------------------------------------
304 Alberto Garcia	  2010-10-20
Changes to the default precision of grid magnitudes (-->trunk-322)

The grid functions (charge densities, potentials, etc) are now in
double precision by default. The 'phi' array that holds the values of
the basis orbitals on the real-space grid is kept in single precision.

The following pre-processing symbols at compile time control the 
precision selection:

#ifdef GRID_SP
    integer, parameter :: grid_p = sp
    integer, parameter :: phi_grid_p = sp
#elif defined(GRID_DP)
    integer, parameter :: grid_p = dp
    integer, parameter :: phi_grid_p = dp
#else
    integer, parameter :: grid_p = dp
    integer, parameter :: phi_grid_p = sp
#endif

GRID_DP will lead to a sizable memory increase, as 'phi' is the main
user of memory on the grid. On the other hand, the gains in accuracy
are negligible, as the operations over 'phi' are accumulated in double
precision variables.

GRID_SP recovers the old Siesta default. It will not free much
memory, and it will show some numerical differences.

modified:
  Docs/siesta.ind
  Docs/siesta.tex
  Src/meshsubs.F
  Src/precision.F
  


------------------------------------
303 Alberto Garcia	  2010-10-19
Merged some precision changes in m_ts* modules
  
* R. Grima had already fixed the precision of the "v" variable (real
  space potential) to be grid_p in the TSVHFix and TSvoltage2
  subroutines (m_ts_in_siesta.F90 module).

* F.D. Novaes had made more cosmetic changes to declarations, which
  have been merged from the trunk:
  
    real*8 --> real(dp)
    complex*16 --> complex(dp)
    double precision --> real(dp)

* The argument list of routine "transiesta" has been shortened.

------------------------------------
302 Alberto Garcia	  2010-10-18
Merge of SiestaXC + timer, alloc, FoX, fixes --> trunk-320

* New siestaXC library including van der Waals functional

Implementation of the non local van der Waals density functional 
of Dion et al (PRL 92, 246401 (2004), PRL 103, 096102 (2009)).

All the exchange-correlation routines have been placed in a library
called siestaXC, whose unique entry point is module m_siestaxc. The
sources are in subdirectory Src/SiestaXC, whose makefile allows to
create a self-contained distribution in file siestaXC.tgz, that can
be used in programs other than siesta. The library sources that are
used by siesta also outside the library (like alloc.F90) remain in
Src, and are copied by SiestaXC/makefile into siestaXC.tgz.

The library is used to compile siesta itself, with a scheme similar
to that used for MPI, fdf and FoX. Pseudo/atom has been also adapted
to use the siestaXC library.

The implementation of the non local van der Waals density functional
has led to a whole rewritting of cellxc and a major one of atomxc.
File xc has been splitted in m_atomxc, m_ldaxc, and m_ggaxc, which
are now modules. The VDW-specific routines are in module m_vdwxc.

The new parallelization of cellxc has led to several new modules, of
which mesh3d is the largest one. It allows new distributions of mesh
points among processors, that can change dynamically. Other relevant
modules are fftr, for 3-D FFTs of real functions. fft3d has changed
to allow (complex) 3-D FFTs using the new distributions of mesh points.
Module mesh1d provides radial (1-D) mesh utilities. Module m_debugXC
writes reports debugXC.node$$ with details of mesh distributions.

NOTE: The BSC version of cellxc (including its unique "LINEAR" parallel
distribution) has been kept in the code, and it is enabled at compile
time by defining the BSC_CELLXC pre-processor symbol.

(Jose Soler (UAM), with help by Alberto Garcia (ICMAB), Rogeli Grima
(BSC) , and Jose Maria Cela (BSC))

* The new m_timer module, together with changes in MPI/mpi_siesta, allows
the profiling of MPI communication times, for each routine that calls 
timer, after compiling with -DMPI_TIMING. Routine timer itself remains 
external, but it uses m_timer operationally.

* The full accounting and reporting of allocated arrays is now done in
module alloc, and printed in (SystemLabel).alloc. The old 'memory'
routine now passes information to alloc for this accounting, rather
than the other way around. Therefore, the 'total' allocation sizes
given by memory routine are no longer complete, though they are still
printed.

* Incorporate some of J. Soler's documentation and conciseness changes
  to meshsubs (but note that the distribution of the indexp array had
  already been implemented separately by Rogeli Grima).

* Partially merged J. Soler's changes for a correct accounting of
array allocation. Both the 'name' and 'routine' arguments should be
identical (including case sensitivity) in the corresponding calls to
re_alloc and de_alloc of an array.  The two arguments are combined
into an internal name as trim(routine)//' '//name, so that
(name='rho',routine='dhscf') is equivalent to (name='dhscf rho'). This
is the name printed in the allocation report. NOTE: Rogeli Grima had
been making similar changes. To avoid a painful merging, most of the
detailed changes by J. Soler have been temporarily left out, pending
another review.

* The (mainly obsolete) 'nodes' option for basis orbital generation was
producing orbitals with one excess radial node (i.e. one and two nodes
for double zeta, instead of zero and one node). Corrected.

* Clarification of the use of *_last geometry information (A. Garcia)

The variables xa_last (formerly xalast), ucell_last, and scell_last
are used to hold the information related to the last geometry for
which the electronic structure has been computed. This is necessary
since the "siesta_move" routine updates the geometry after every step.
By using the "*_last" variables instead of "xa", "ucell", and "scell",
we make sure that "siesta_analysis", when calculating the
polarization, optical properties, etc, uses the coordinates actually
used to compute the electronic structure.

The *_last variables are set at the beginning of "siesta_move", before
the actual displacements. Due to a bug in the program, however, this
was being done only at the final scheduled step ('fincoor'), instead
of inconditionally after every step. Thus they could be used undefined
if, for example, a relaxation finishes before the scheduled number of
steps (which is typical).

While fixing this bug, it became apparent that some other sections of
"siesta_analysis" are using the "predicted" coordinates (the output of
coordinates in various formats) instead of the last "used"
coordinates. This can be considered a feature or a bug.

Similarly, the computation of the spin polarization uses a density
matrix that is actually the result of a mixing after the last SCF
step.

(Fix prepared by A. Garcia after the discovery of the bug by J. Gale)

* Support for the Armiento and Mattson's  functional added (From J. Gale)

Support for the AM05 functional has been added to routines in SiestaXC 
and Pseudo. This is done using the AM05 subroutines distributed by 
Armiento and Mattson, under the terms of the conditions contained within 
the header to their software allowing modification and redistribution 
provider the original copyright header remains. 

A new module, am05, contained within the file SiestaXC/am05.f90, has been 
added containing the code from Armiento and Mattsson. Within ggaxc.f90 
a wrapper has been added, am05xc, to pass the variables from ggaxc to 
am05 subroutines and handle the return arguments appropriately. 

In the atom program the two-letter symbol "am" has been added for AM05.
In SIESTA the GGA Authors are "AM05".

A test of the AM05 functional added in h2o_am05.

* Add support for PBESol XC functional (J. Gale)

* Update FoX library and add XML.AbortOnErrors and XML.AbortOnWarnings
  (From A. Walker)

It is sometimes useful for warnings or errors generated by the FoX
libary to result in an abort to generate a core dump or stack trace to
see where in Siesta the call causing the error is being made. It is
now possible to turn on this behaviour at runtime using two new fdf
boolean tags:

 XML.AbortOnErrors  XML.AbortOnWarnings

Both are boolean and default to .false. (which mirrors the current
stopping behaviour).

These features have been made possible by an update in the FoX library
that adds an interface to allow errors and warnings to result in an
abort signal. In the update there is also a fix to work around a PGI
bug for the overloaded wxml interfaces (aparently not used in Siesta)
and a change to the prng to avoid using initalised data in prng_init.

* Other fixes:

Pass FPP_FLAGS to MPI makefile (for MPI_TIMINGS)
Fix intent of g2max in dhscf. Put vmat in a module
Wrap output in timer when MPI_TIMINGS is off 
Use (possibly empty) array section of eold in call.
Fix array actual arguments in ambiguous interfaces

------------------------------------
301 Alberto Garcia	  2010-09-30
Fine-tuning of grid load-balancing and communications

(By Rogeli Grima)

* The load heuristics for the quadratic and "linear" distributions have
been changed to take into account the fact that "vacuum" points do
take some processing time.

* To alleviate communication bottlenecks while changing distributions,
asynchronous mpi sends and receives are used. This means that special
buffers have to be allocated. Asynchronous communications are used by
default, unless the SYNCHRONOUS preprocessor variable is set at compile
time.

* Other relevant changes: 
 
  -- Use eight-byte integers for memory counters
  -- Insertion of some trace markers, with extra mpi barriers, in 
     a few places.

This version still contains code to implement prototype
Jacobi-Davidson iterative diagonalization (with and without the use of
the SLEPC library).

Detail of changes (most relevant):

dhscf:        removal of debugging and some timing sections. Other cosmetics.
alloc:        better name handling for memory accounting
memory:       use 8-byte integers for counters.
memoryinfo:   use 8-byte integers for counters.
cellxc:       insert trace markers
compute_dm:   remove debug sections related to slepc.
diagon:       add debug markers

distriphionmesh: change load heuristics for the quadratic and "linear"
                 distributions. Allocate asynchronous-comms buffers.
fft3d:        use timing
initmesh:     make ntp into an 8-byte integer.
initparallel: add debug sections.
mneighb:      use timing

moremeshsubs: add support for asynchronous communications. Rename
              meshDistr variable to distr.
poison:       better declaration of variables. Traces (barriers?)
rhoofd:       turn into .F file to add MPI barriers for traces.
siesta_cmlsubs: avoid the use of 'str' from FoX.
siesta_forces:  use mpi_finalize directly instead of "bye" if 'h_setup_only'.
siesta_init:  traces 
slepc_diagon: reorganization.
timer:        cosmetics
vmat:         turn into .F file to add MPI barriers for traces.

modified:
  Src/alloc.F90
  Src/cellxc.F
  Src/compute_dm.F
  Src/deflatedmv.F
  Src/dhscf.F
  Src/diagon.F
  Src/distriphionmesh.F
  Src/fft3d.F
  Src/initatom.f
  Src/initmesh.F
  Src/initparallel.F
  Src/jacobi_davidson.F
  Src/memory.F
  Src/memoryinfo.F
  Src/mneighb.f
  Src/moremeshsubs.F
  Src/ordern.F
  Src/overfsm.f
  Src/poison.F
  Src/rhoofd.F
  Src/setup_H0.F
  Src/siesta_cmlsubs.F90
  Src/siesta_forces.F
  Src/siesta_init.F
  Src/slepc_diagon.F
  Src/timer.F
  Src/vmat.F
  Src/write_subs.F

------------------------------------
300 Alberto Garcia	  2010-09-29
Updates to fdf and dhscf (grdsam, doping)

* Make fdf_single and fdf_double accept integers
  (fixed version, including call to 'values')

* Define proper kind parameters in fdf/prec.F90

* Increase width of ik field in OCCS file

* Re-implement the doping feature in the uniform distribution

In this way it is much easier, since we can refer directly to the
points at which rhoatm is different from zero, without having to use
any indexes. In fact, this could be done in any distribution, as long
as both rho and rhoatm are distributed in the same way.

* Fix grdsam by adding a call to dhscf_init

Still some more cleanup possible: remove samesh check.

removed:
  Src/doping.F
added:
  Src/doping_uniform.F
modified:
  Src/Makefile
  Src/dhscf.F
  Src/diagk.F
  Src/diagk_file.F
  Src/fdf/fdf.F90
  Src/fdf/prec.F90
  Src/grdsam.F

------------------------------------
299 Alberto Garcia	  2010-02-22
Merge of SLEPC work by Rogeli Grima (in progress)

New routines to use the SLEPC library for diagonalization.

Note that some sections depend on the use 
of the _SLEPC_ preprocessor symbol.

(Extra timing stills depends on __PPC970__)

added:
  Src/slepc_diagon.F
modified:
  Docs/Grid-Work.CHANGES
  Src/Makefile
  Src/compute_dm.F
  Src/domain_decom.F
  Src/gmres.F
  Src/initparallel.F
  Src/jacobi_davidson.F
  Src/siesta_forces.F
  Src/siesta_init.F
  Src/siesta_options.F90
  version.info


------------------------------------
298 Alberto Garcia	  2010-02-22
Clarify timing in dhscf

The timing tags in dhscf were wrong. Now there is a new set for
DHSCF_Init.

------------------------------------
297 Alberto Garcia	  2010-02-19
More data on sizes. Optional stop after H setup. Cleanup

* If the fdf variable "H-Setup-Only" is "true", the program will stop
  after setting up the hamiltonian in the first iteration, just before
  diagonalization. This is useful to benchmark the new grid routines.

* Removed dead code in InitMesh

* Several mesh routines now print data about sizes.

* Temporarily deactivated the "doping" option and the "grid cell sampling"
  option.

modified:
  Src/dhscf.F
  Src/doping.F
  Src/grdsam.F
  Src/initmesh.F
  Src/phionmesh.F
  Src/setupextmesh.F
  Src/siesta_forces.F
  Src/siesta_options.F90

------------------------------------
296 Alberto Garcia	  2010-02-19
Merged work by Rogeli Grima on mesh routines, with some bug fixes

(Work in progress)

There were some bugs in dhscf and in moremeshsubs, found after
painstakingly commenting the flow of the program.

* dhscf and dhscf_init have been merged in a true module m_dhscf, still
  in file dhscf.F. 

* The mesh initialization part is now done *unconditionally* in
  dhscf_init, i.e, after *every* geometry change, even if the change
  does not involve a cell change. The reason is to avoid complexity,
  since now the mesh parallel distributions will depend on the
  detailed atomic positions even if the cell does not change.
  Besides, the relative cost of a "mesh only" initialization is
  negligible.  The only real observable effect would be a printout of
  "initmesh" data at every geometry iteration.

* The variables "nm" and "nsm" are no longer imported in 'moremeshsubs'
  from module m_dhscf. In fact, nmeshg from module mesh is used instead
  of nm (which is abused as an argument in several routines).

* Routine distMeshData (real version) had a bug when running in serial
  mode and asked to "keep" the clustering or sequential character: it 
  did not copy the input to the output array.

* The change in distribution of the 'drho' array did not take into
  account the spin dimension.

Remaining known bugs:

 - grdsam needs to call dhscf_init before calling dhscf
 - the doping routine needs to be called in the quadratic dist
 - the calculation of the Berry-phase polarization in the first
   iteration of test 'born_spin' is wrong.

------------------------------------
295 Alberto Garcia	  2010-01-25
Update to m_efield and doping modules.

Bring in the in-line documentation in synch with siesta-3.0




      



